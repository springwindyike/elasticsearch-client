<?xml version="1.0" encoding="UTF-8" ?>
<!-- 
  @author: liyue
  
     基于我们先前在log4j上的工作，logback 重写了内部的实现，在某些特定的场景上面，甚至可以比之前的速度快上10倍。
     在保证logback的组件更加快速的同时，同时所需的内存更加少。
  Logback-classic可以在配置文件被修改后，自动重新载入。这个扫描过程很快，无资源争用，并且可以动态扩展支持在上百个线程之间每秒上百万个调用。
  RollingFileAppender在产生新文件的时候，会自动压缩已经打出来的日志文件。压缩是个异步过程，所以甚至对于大的日志文件，
     在压缩过程中应用不会受任何影响。
  
  scan:
              当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
  scanPeriod:
              设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
  debug:
              当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">

  <property name="APP_NAME" value="jcrm-elasticsearch" />
  <contextName>${APP_NAME}</contextName>

  <!-- 控制台标准输出 --> 
  <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>WARN</level>
      <onMatch>DENY</onMatch>
      <onMismatch>NEUTRAL</onMismatch>
    </filter>
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>ERROR</level>
      <onMatch>DENY</onMatch>
      <onMismatch>ACCEPT</onMismatch>
    </filter>
    <encoder> 
      <Pattern>%date{ISO8601} %-5level [%thread] %class.%method\(%file:%line\) - %msg %n</Pattern>
    </encoder> 
  </appender>

  <!-- 控制台错误输出 --> 
  <appender name="STDERR" class="ch.qos.logback.core.ConsoleAppender">
    <target>System.err</target>
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>WARN</level>
      <onMatch>ACCEPT</onMatch>
      <onMismatch>NEUTRAL</onMismatch>
    </filter>
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>ERROR</level>
      <onMatch>ACCEPT</onMatch>
      <onMismatch>DENY</onMismatch>
    </filter>
    <encoder> 
      <Pattern>%date{ISO8601} %-5level [%thread] %class.%method\(%file:%line\) - %msg %n</Pattern>
    </encoder> 
  </appender>
  
  <!-- 
  <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">  
              日志文件输出的文件名
      <FileNamePattern>${catalina.home}/logs/${APP_NAME}.%d{yyyy-MM-dd}.log</FileNamePattern>
      <FileNamePattern>${APP_Name}.%d{yyyy-MM-dd}.log</FileNamePattern>
      log文件的最大个数，当超过时会删除最早的文件
      <MaxHistory>5</MaxHistory>
    </rollingPolicy>
    <encoder>  
               格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符
      <pattern>%date{ISO8601} %-5level [%thread] %class.%method\(%file:%line\) - %msg %n</pattern>
    </encoder>   
    <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
              日志文件最大的大小
      <MaxFileSize>44MB</MaxFileSize>
    </triggeringPolicy>
  </appender> 
  -->
  
  <!-- 异步输出 -->  
  <!-- 
  <appender name="ASYNC" class="ch.qos.logback.classic.AsyncAppender">  
          默认情况下，当BlockingQueue还有20%容量，他将丢弃TRACE、DEBUG和INFO级别的event，
          只保留WARN和ERROR级别的event。为了保持所有的events，设置该值为0。  
    <discardingThreshold >0</discardingThreshold>  
        更改默认的队列的深度,该值会影响性能.默认值为256  
    <queueSize>512</queueSize>  
         添加附加的appender,最多只能添加一个  
    <appender-ref ref="FILE"/>  
  </appender> 
  -->  
  
  <!-- 
  show parameters for hibernate sql 专为 Hibernate 定制  
  <logger name="org.hibernate.type.descriptor.sql.BasicBinder" level="TRACE" />    
  <logger name="org.hibernate.type.descriptor.sql.BasicExtractor" level="DEBUG" />    
  <logger name="org.hibernate.SQL" level="DEBUG" />    
  <logger name="org.hibernate.engine.QueryParameters" level="DEBUG" />    
  <logger name="org.hibernate.engine.query.HQLQueryPlan" level="DEBUG" /> 
  -->  
  
  <!-- additivity="false" -->
  <logger name="com.hd123.jcrm.search" >
    <!-- TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF -->
    <level value="DEBUG" />
  </logger>
  
  <root>
    <!-- TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF -->
    <level value="INFO" />
    <appender-ref ref="STDOUT" />
    <appender-ref ref="STDERR" />
    <!-- <appender-ref ref ="ASYNC"/> -->
  </root>

  <!-- 
     异步记录数据库
  <appender name="DB" class="ch.qos.logback.classic.db.DBAppender">  
    <connectionSource class="ch.qos.logback.core.db.DriverManagerConnectionSource">  
      <dataSource  
        class="com.mchange.v2.c3p0.ComboPooledDataSource">  
      <driverClass>com.mysql.jdbc.Driver</driverClass>  
      <url>jdbc:mysql://127.0.0.1:3306/databaseName</url>  
      <user>root</user>  
      <password>root</password>  
      </dataSource>  
    </connectionSource>  
  </appender>  
  -->
  
</configuration>
